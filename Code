import pandas as pd
import numpy as np
from scipy.stats import gamma
from lmfit import minimize, Parameters, report_fit

# Read in the data from the GitHub repository
url = "https://raw.githubusercontent.com/<your-username>/<Assignment-2>/main/AgeAtFlowering.csv"
dat = pd.read_csv(url)

# Remove rows with missing data
dat = dat[(dat['MISSING'] == 0) & (dat['SURV_TO_FL'] == 1)]

# Create a new variable "AGE"
dat['AGE'] = dat['FL_DAY'] - dat['PDAY']

# Define the negative log likelihood function
def NLLgamma_pday2(params, y, condition1, condition2, condition3, x1, x2):
    intercept = params['intercept']
    b1 = params['b1']
    est_sd = params['est_sd']

    est_mean = intercept + (b1 * x1)
    shape = est_mean**2 / est_sd**2
    scale = est_sd**2 / est_mean

    prob_vect = np.where(condition1 == 1, 
                         gamma.cdf(40, shape, scale=scale) - gamma.cdf(36, shape, scale=scale),
                         np.where(condition2 == 1, 
                                  gamma.cdf(48, shape, scale=scale) - gamma.cdf(45, shape, scale=scale),
                                  np.where(condition3 == 1,
                                           gamma.cdf(52 - x2, shape, scale=scale) - gamma.cdf(49 - x2, shape, scale=scale),
                                           gamma.pdf(y, shape, scale=scale))))
    
    return -np.sum(np.log(prob_vect))

# Build table to hold results
result = pd.DataFrame(columns=["Pop", "Samp", "Parameter", "Est", "SE", "LCI", "UCI"])

# Loop through populations and offspring samples
populations = [1, 3, 5]
os_sample = ["prop", "even"]

for p in populations:
    for s in os_sample:
        temp = pd.DataFrame(columns=result.columns)
        temp['Pop'] = [p] * 3
        temp['Samp'] = [s] * 3
        temp['Parameter'] = ["Intercept", "b.offspring", "Est.sd"]

        pop = dat[dat['POPULATION'] == p]
        pop['OFFSPRING'] = np.where(pop['PARENT'] == 1, 0, 1)

        if s == "prop":
            pop = pop[pop['OS_PROP'] == 1]
        else:
            pop = pop[pop['OS_EVEN'] == 1]

        params = Parameters()
        params.add('intercept', value=30, min=0)
        params.add('b1', value=0)
        params.add('est_sd', value=3, min=0)

        result_fit = minimize(NLLgamma_pday2, params, args=(pop['AGE'], pop['DRY_BUDS41'], pop['DRY_BUDS42'], pop['HERB_49'], pop['OFFSPRING'], pop['PDAY']))

        temp['Est'] = [round(result_fit.params['intercept'].value, 2), round(result_fit.params['b1'].value, 2), round(result_fit.params['est_sd'].value, 2)]
        temp['SE'] = [round(result_fit.params['intercept'].stderr, 2), round(result_fit.params['b1'].stderr, 2), round(result_fit.params['est_sd'].stderr, 2)]
        
        ci = result_fit.conf_interval()
        temp['LCI'] = [round(ci['intercept'][0][1], 2), round(ci['b1'][0][1], 2), round(ci['est_sd'][0][1], 2)]
        temp['UCI'] = [round(ci['intercept'][1][1], 2), round(ci['b1'][1][1], 2), round(ci['est_sd'][1][1], 2)]

        result = pd.concat([result, temp], ignore_index=True)

print(result)
